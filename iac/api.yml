AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  LambdaZip:
    Description: File name of the zipped lambda
    Type: String
    Default: 'index.zip'
  LabmdaRuntime:
    Type: String
    Default: 'nodejs18.x'
    AllowedValues: ['nodejs18.x', 'nodejs20.x']
Resources:
  HandlerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub CodeBucket
        S3Key: !Sub LambdaZip
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Sub LabmdaRuntime

  # Creates a single-route (wildcard) HTTP API for our Lambda function.
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: my-example-api
      ProtocolType: HTTP
  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt HandlerLambdaFunction.Arn
      PayloadFormatVersion: '2.0'
  ProxyHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn: HttpApiIntegration
    Properties:
      RouteKey: ANY /{proxy+}
      ApiId: !Ref HttpApi
      Target:
        !Join
        - /
        - - integrations
          - !Ref HttpApiIntegration
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      ApiId: !Ref HttpApi
      AutoDeploy: true

  # Allows the Lambda function to access CloudWatch (add other services here, e.g. S3)
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"


  LambdaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 
            - "s3:PutObject"
            - "s3:GetObject"
            Effect: "Allow"
            Principal:
              AWS: !GetAtt LambdaFunctionRole.Arn
            Resource: !Sub "arn:aws:s3:::${LambdaBucket}/*"

  # Allows API Gateway to call our Lambda function.
  HandlerLambdaPermissionHttpApi:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HandlerLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref HttpApi
          - /*

# Outputs the URL to our Lambda HTTP API.
Outputs:
  ApiUrl:
    Description: URL of the HTTP API.
    Value:
      !Join
      - ''
      - - !Ref HttpApi
        - .execute-api.
        - !Ref AWS::Region
        - .
        - !Ref AWS::URLSuffix
